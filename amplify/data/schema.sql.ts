/* eslint-disable */
/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */
import { a } from "@aws-amplify/data-schema";
import { configure } from "@aws-amplify/data-schema/internals";
import { secret } from "@aws-amplify/backend";

export const schema = configure({
    database: {
        identifier: "IDwV0iEwG1VrCqcyBA0n5g",
        engine: "postgresql",
        connectionUri: secret("SQL_CONNECTION_STRING"),
        vpcConfig: {
            vpcId: "vpc-091080ed6c0fc28f9",
            securityGroupIds: [
                "sg-036076ab76c787e36",
                "sg-0805851ecf3172563"
            ],
            subnetAvailabilityZones: [
                {
                    subnetId: "subnet-0d34531e6a68c4e72",
                    availabilityZone: "us-east-2c"
                },
                {
                    subnetId: "subnet-00bb5b86c398a9096",
                    availabilityZone: "us-east-2b"
                },
                {
                    subnetId: "subnet-09ef6bd42a4b1cf78",
                    availabilityZone: "us-east-2a"
                }
            ]
        }
    }
}).schema({
    "cards": a.model({
        card_id: a.id().required(),
        card_name: a.string().required(),
        str_top: a.integer().required(),
        str_right: a.integer().required(),
        str_bottom: a.integer().required(),
        str_left: a.integer().required(),
        card_element: a.string(),
        card_type: a.string(),
        card_version: a.integer().required(),
        created_at: a.datetime(),
        updated_at: a.datetime(),
        card_tier: a.integer().required(),
        created_by: a.id(),
        updated_by: a.id(),
        is_active: a.boolean(),
        integrity_hash: a.string(),
        card_pwr: a.integer().required()
    }).identifier([
        "card_id"
    ]),
    "game_moves": a.model({
        move_id: a.id().required(),
        session_id: a.id().required(),
        user_id: a.id().required(),
        move_data: a.json().required(),
        created_at: a.datetime()
    }).identifier([
        "move_id"
    ]),
    "game_sessions": a.model({
        session_id: a.id().required(),
        player1_id: a.id().required(),
        player2_id: a.id(),
        player1_cards: a.json().required(),
        player2_cards: a.json(),
        game_state: a.json().required(),
        rules: a.json().required(),
        turn: a.integer().required(),
        winner_id: a.id(),
        created_at: a.datetime(),
        updated_at: a.datetime()
    }).identifier([
        "session_id"
    ]),
    "player_cards": a.model({
        id: a.id().required(),
        user_id: a.id().required(),
        card_id: a.id().required(),
        quantity: a.integer().required(),
        created_at: a.datetime(),
        updated_at: a.datetime(),
        card_pwr: a.integer().required()
    }).identifier([
        "id"
    ]),
    "player_decks": a.model({
        deck_id: a.id().required(),
        user_id: a.id().required(),
        deck_name: a.string().required(),
        cards: a.json().required(),
        created_at: a.datetime(),
        updated_at: a.datetime()
    }).identifier([
        "deck_id"
    ]),
    "users": a.model({
        id: a.id().required(),
        username: a.string().required(),
        role: a.string(),
        status: a.string(),
        created_at: a.datetime(),
        updated_at: a.datetime(),
        last_login: a.datetime(),
        avatar_url: a.string(),
        bio: a.string(),
        created_by: a.id(),
        updated_by: a.id(),
        is_active: a.boolean(),
        integrity_hash: a.string()
    }).identifier([
        "id"
    ])
});
